import numpy as np
import pandas as pd

# Sample data: user ratings for movies
data = {
    'user_id': [1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5],
    'movie_id': [1, 2, 3, 1, 2, 4, 1, 4, 2, 3, 1, 3],
    'rating': [5, 3, 4, 4, 2, 5, 5, 4, 3, 2, 4, 5]
}

df = pd.DataFrame(data)
print(df)

user_movie_matrix = df.pivot(index='user_id', columns='movie_id', values='rating').fillna(0)
print(user_movie_matrix)

from sklearn.metrics.pairwise import cosine_similarity

# Calculate cosine similarity between users
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)
print(user_similarity_df)

def get_recommendations(user_id, user_movie_matrix, user_similarity_df, num_recommendations=2):
    # Get the user's ratings
    user_ratings = user_movie_matrix.loc[user_id]
    
    # Get the similarity scores for the user
    user_sim_scores = user_similarity_df[user_id]
    
    # Calculate weighted ratings
    weighted_ratings = user_movie_matrix.T.dot(user_sim_scores) / np.array([np.abs(user_sim_scores).sum(axis=0)])
    
    # Create a DataFrame for weighted ratings
    weighted_ratings_df = pd.DataFrame(weighted_ratings, index=user_movie_matrix.columns, columns=['weighted_rating'])
    
    # Filter out movies the user has already rated
    unrated_movies = user_ratings[user_ratings == 0].index
    recommendations = weighted_ratings_df.loc[unrated_movies]
    
    # Sort by weighted rating and get the top recommendations
    recommendations = recommendations.sort_values(by='weighted_rating', ascending=False)
    
    return recommendations.head(num_recommendations)

# Example: Recommend movies for user 1
recommended_movies = get_recommendations(1, user_movie_matrix, user_similarity_df)
print(recommended_movies)
